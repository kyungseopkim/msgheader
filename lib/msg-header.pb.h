// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg-header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2dheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2dheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2dheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2dheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2dheader_2eproto;
namespace lucid {
namespace msg {
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
}  // namespace msg
}  // namespace lucid
PROTOBUF_NAMESPACE_OPEN
template<> ::lucid::msg::MessageHeader* Arena::CreateMaybeMessage<::lucid::msg::MessageHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lucid {
namespace msg {

// ===================================================================

class MessageHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lucid.msg.MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {}
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lucid.msg.MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_msg_2dheader_2eproto);
    return ::descriptor_table_msg_2dheader_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVinFieldNumber = 1,
    kPayloadVerFieldNumber = 2,
    kArxmlVerFieldNumber = 3,
    kSeqFieldNumber = 4,
    kVlanFieldNumber = 5,
    kTsFieldNumber = 6,
  };
  // string vin = 1;
  void clear_vin();
  const std::string& vin() const;
  void set_vin(const std::string& value);
  void set_vin(std::string&& value);
  void set_vin(const char* value);
  void set_vin(const char* value, size_t size);
  std::string* mutable_vin();
  std::string* release_vin();
  void set_allocated_vin(std::string* vin);
  private:
  const std::string& _internal_vin() const;
  void _internal_set_vin(const std::string& value);
  std::string* _internal_mutable_vin();
  public:

  // uint32 payloadVer = 2;
  void clear_payloadver();
  ::PROTOBUF_NAMESPACE_ID::uint32 payloadver() const;
  void set_payloadver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_payloadver() const;
  void _internal_set_payloadver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 arxmlVer = 3;
  void clear_arxmlver();
  ::PROTOBUF_NAMESPACE_ID::uint32 arxmlver() const;
  void set_arxmlver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_arxmlver() const;
  void _internal_set_arxmlver(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 seq = 4;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 vlan = 5;
  void clear_vlan();
  ::PROTOBUF_NAMESPACE_ID::uint32 vlan() const;
  void set_vlan(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vlan() const;
  void _internal_set_vlan(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 ts = 6;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::uint64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lucid.msg.MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vin_;
  ::PROTOBUF_NAMESPACE_ID::uint32 payloadver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 arxmlver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vlan_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2dheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// string vin = 1;
inline void MessageHeader::clear_vin() {
  vin_.ClearToEmpty();
}
inline const std::string& MessageHeader::vin() const {
  // @@protoc_insertion_point(field_get:lucid.msg.MessageHeader.vin)
  return _internal_vin();
}
inline void MessageHeader::set_vin(const std::string& value) {
  _internal_set_vin(value);
  // @@protoc_insertion_point(field_set:lucid.msg.MessageHeader.vin)
}
inline std::string* MessageHeader::mutable_vin() {
  // @@protoc_insertion_point(field_mutable:lucid.msg.MessageHeader.vin)
  return _internal_mutable_vin();
}
inline const std::string& MessageHeader::_internal_vin() const {
  return vin_.Get();
}
inline void MessageHeader::_internal_set_vin(const std::string& value) {
  
  vin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageHeader::set_vin(std::string&& value) {
  
  vin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:lucid.msg.MessageHeader.vin)
}
inline void MessageHeader::set_vin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:lucid.msg.MessageHeader.vin)
}
inline void MessageHeader::set_vin(const char* value,
    size_t size) {
  
  vin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:lucid.msg.MessageHeader.vin)
}
inline std::string* MessageHeader::_internal_mutable_vin() {
  
  return vin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageHeader::release_vin() {
  // @@protoc_insertion_point(field_release:lucid.msg.MessageHeader.vin)
  return vin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageHeader::set_allocated_vin(std::string* vin) {
  if (vin != nullptr) {
    
  } else {
    
  }
  vin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:lucid.msg.MessageHeader.vin)
}

// uint32 payloadVer = 2;
inline void MessageHeader::clear_payloadver() {
  payloadver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::_internal_payloadver() const {
  return payloadver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::payloadver() const {
  // @@protoc_insertion_point(field_get:lucid.msg.MessageHeader.payloadVer)
  return _internal_payloadver();
}
inline void MessageHeader::_internal_set_payloadver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  payloadver_ = value;
}
inline void MessageHeader::set_payloadver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_payloadver(value);
  // @@protoc_insertion_point(field_set:lucid.msg.MessageHeader.payloadVer)
}

// uint32 arxmlVer = 3;
inline void MessageHeader::clear_arxmlver() {
  arxmlver_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::_internal_arxmlver() const {
  return arxmlver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::arxmlver() const {
  // @@protoc_insertion_point(field_get:lucid.msg.MessageHeader.arxmlVer)
  return _internal_arxmlver();
}
inline void MessageHeader::_internal_set_arxmlver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  arxmlver_ = value;
}
inline void MessageHeader::set_arxmlver(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_arxmlver(value);
  // @@protoc_insertion_point(field_set:lucid.msg.MessageHeader.arxmlVer)
}

// uint32 seq = 4;
inline void MessageHeader::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::seq() const {
  // @@protoc_insertion_point(field_get:lucid.msg.MessageHeader.seq)
  return _internal_seq();
}
inline void MessageHeader::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void MessageHeader::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:lucid.msg.MessageHeader.seq)
}

// uint32 vlan = 5;
inline void MessageHeader::clear_vlan() {
  vlan_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::_internal_vlan() const {
  return vlan_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::vlan() const {
  // @@protoc_insertion_point(field_get:lucid.msg.MessageHeader.vlan)
  return _internal_vlan();
}
inline void MessageHeader::_internal_set_vlan(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vlan_ = value;
}
inline void MessageHeader::set_vlan(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vlan(value);
  // @@protoc_insertion_point(field_set:lucid.msg.MessageHeader.vlan)
}

// uint64 ts = 6;
inline void MessageHeader::clear_ts() {
  ts_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MessageHeader::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MessageHeader::ts() const {
  // @@protoc_insertion_point(field_get:lucid.msg.MessageHeader.ts)
  return _internal_ts();
}
inline void MessageHeader::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ts_ = value;
}
inline void MessageHeader::set_ts(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:lucid.msg.MessageHeader.ts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msg
}  // namespace lucid

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2dheader_2eproto
